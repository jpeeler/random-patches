diff --git a/contrib/overcloud_containers.yaml b/contrib/overcloud_containers.yaml
new file mode 100644
index 0000000..3aaab4a
--- /dev/null
+++ b/contrib/overcloud_containers.yaml
@@ -0,0 +1,36 @@
+   uploads:
+     -
+        imagename: dprince/heat-docker-agents-centos:latest
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
+
+        imagename: rthallisey/centos-binary-nova-compute:liberty
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
+
+        imagename: rthallisey/centos-binary-nova-libvirt:liberty
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
+
+        imagename: rthallisey/centos-binary-data:liberty
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
+
+        imagename: rthallisey/centos-binary-neutron-openvswitch-agent:liberty
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
+
+        imagename: rthallisey/centos-binary-openvswitch-vswitchd:liberty
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
+
+        imagename: rthallisey/centos-binary-openvswitch-db-server:liberty
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
diff --git a/doc/source/uploads.rst b/doc/source/uploads.rst
new file mode 100644
index 0000000..1242559
--- /dev/null
+++ b/doc/source/uploads.rst
@@ -0,0 +1,21 @@
+=============
+Image uploads
+=============
+
+.. toctree::
+   :glob:
+   :maxdepth: 2
+
+   image/*
+
+
+YAML file format
+----------------
+::
+
+   uploads:
+     -
+        imagename: dprince/heat-docker-agents-centos:latest
+        uploader: docker
+        pull_source: docker.io
+        push_destination: localhost:8787
diff --git a/requirements.txt b/requirements.txt
index d86015e..457c690 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -4,4 +4,5 @@
 
 pbr>=1.6
 Babel>=1.3
+docker-py>=1.4.0  # Apache-2.0
 python-heatclient>=0.6.0
diff --git a/scripts/upload_image.py b/scripts/upload_image.py
new file mode 100755
index 0000000..99ac336
--- /dev/null
+++ b/scripts/upload_image.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+
+import argparse
+import os
+import sys
+
+POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
+                                   os.pardir,
+                                   os.pardir))
+if os.path.exists(os.path.join(POSSIBLE_TOPDIR,
+                               'tripleo_common', '__init__.py')):
+    sys.path.insert(0, POSSIBLE_TOPDIR)
+
+from tripleo_common.image.image_uploader import ImageUploadManager
+
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser(description='Parse input params')
+    parser.add_argument(
+        '-f',
+        '--file',
+        required=True,
+        help='Input file containing images to upload'
+    )
+    args = parser.parse_args()
+
+    filelist = []
+    filelist.append(args.file)
+    uploader = ImageUploadManager(filelist, verbose=True, debug=True)
+    uploader.upload()
diff --git a/tripleo_common/common/exceptions.py b/tripleo_common/common/exceptions.py
index b825832..d6a866f 100644
--- a/tripleo_common/common/exceptions.py
+++ b/tripleo_common/common/exceptions.py
@@ -16,3 +16,7 @@
 
 class ImageBuilderException(Exception):
     pass
+
+
+class ImageUploaderException(Exception):
+    pass
diff --git a/tripleo_common/image/base.py b/tripleo_common/image/base.py
index dbf3b69..9c67daa 100644
--- a/tripleo_common/image/base.py
+++ b/tripleo_common/image/base.py
@@ -23,6 +23,7 @@ import yaml
 class BaseImageManager(object):
     logger = logging.getLogger(__name__ + '.BaseImageManager')
     APPEND_ATTRIBUTES = ['elements', 'options', 'packages']
+    CONFIG_SECTIONS = ['disk_images', 'uploads']
 
     def __init__(self, config_files, verbose=False, debug=False):
         self.config_files = config_files
@@ -49,34 +50,33 @@ class BaseImageManager(object):
             except KeyError:
                 existing_image[attribute_name] = attribute
 
-    def load_config_files(self):
-        disk_images = {}
+    def load_config_files(self, section):
+        config_data = {}
         for config_file in self.config_files:
             if os.path.isfile(config_file):
                 with open(config_file) as cf:
-                    images = yaml.load(cf.read()).get("disk_images")
-                    self.logger.debug(
-                        'disk_images JSON: %s' % str(disk_images))
-                for image in images:
-                    image_name = image.get('imagename')
-                    existing_image = disk_images.get(image_name)
+                    data = yaml.load(cf.read()).get(section)
+                    if not data:
+                        return None
+                    self.logger.debug('%s JSON: %s' % (section, str(data)))
+                for item in data:
+                    image_name = item.get('imagename')
+                    existing_image = config_data.get(image_name)
                     if not existing_image:
-                        disk_images[image_name] = image
+                        config_data[image_name] = item
                         continue
 
                     for attr in self.APPEND_ATTRIBUTES:
-                        self._extend_or_set_attribute(existing_image, image,
+                        self._extend_or_set_attribute(existing_image, item,
                                                       attr)
 
                     # If a new key is introduced, add it.
-                    for key, value in six.iteritems(image):
+                    for key, value in six.iteritems(item):
                         if key not in existing_image:
-                            existing_image[key] = image[key]
-
-                    disk_images[image_name] = existing_image
+                            existing_image[key] = item[key]
 
+                    config_data[image_name] = existing_image
             else:
                 self.logger.error('No config file exists at: %s' % config_file)
                 raise IOError('No config file exists at: %s' % config_file)
-
-        return [x for x in disk_images.values()]
+        return [x for x in config_data.values()]
diff --git a/tripleo_common/image/build.py b/tripleo_common/image/build.py
index 83d2ad8..310a37e 100644
--- a/tripleo_common/image/build.py
+++ b/tripleo_common/image/build.py
@@ -41,7 +41,7 @@ class ImageBuildManager(BaseImageManager):
 
         self.logger.info('Using config files: %s' % self.config_files)
 
-        disk_images = self.load_config_files()
+        disk_images = self.load_config_files(self.CONFIG_SECTIONS[0])
 
         for image in disk_images:
             arch = image.get('arch', 'amd64')
diff --git a/tripleo_common/image/image_uploader.py b/tripleo_common/image/image_uploader.py
new file mode 100644
index 0000000..ce2c529
--- /dev/null
+++ b/tripleo_common/image/image_uploader.py
@@ -0,0 +1,97 @@
+#   Copyright 2015 Red Hat, Inc.
+#
+#   Licensed under the Apache License, Version 2.0 (the "License"); you may
+#   not use this file except in compliance with the License. You may obtain
+#   a copy of the License at
+#
+#        http://www.apache.org/licenses/LICENSE-2.0
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+
+
+import abc
+import logging
+import six
+
+from docker import Client
+from tripleo_common.common.exceptions import ImageUploaderException
+from tripleo_common.image.base import BaseImageManager
+
+
+class ImageUploadManager(BaseImageManager):
+    """Manage the uploading of image files
+
+       Manage the uploading of images from a config file specified in YAML
+       syntax. Multiple config files can be specified. They will be merged.
+       """
+    logger = logging.getLogger(__name__ + '.ImageUploadManager')
+
+    def __init__(self, config_files, verbose=False, debug=False):
+        super(ImageUploadManager, self).__init__(config_files, verbose, debug)
+
+    def upload(self):
+        """Start the upload process"""
+
+        self.logger.info('Using config files: %s' % self.config_files)
+
+        upload_images = self.load_config_files(self.CONFIG_SECTIONS[1])
+
+        for item in upload_images:
+            image_name = item.get('imagename')
+            uploader = item.get('uploader')
+            pull_source = item.get('pull_source')
+            push_destination = item.get('push_destination')
+
+            self.logger.info('imagename: %s' % image_name)
+
+            uploader = ImageUploader.get_uploader(uploader)
+            uploader.upload_image(image_name, pull_source, push_destination)
+
+
+@six.add_metaclass(abc.ABCMeta)
+class ImageUploader(object):
+    """Base representation of an image uploading method"""
+
+    @staticmethod
+    def get_uploader(uploader):
+        if uploader == 'docker':
+            return DockerImageUploader()
+        raise ImageUploaderException('Unknown image uploader type')
+
+    @abc.abstractmethod
+    def upload_image(self, image_name, pull_source, push_destination):
+        """Upload a disk image"""
+        pass
+
+
+class DockerImageUploader(ImageUploader):
+    """Upload images using docker push"""
+
+    logger = logging.getLogger(__name__ + '.DockerImageUploader')
+
+    def upload_image(self, image_name, pull_source, push_destination):
+        dockerc = Client(base_url='unix://var/run/docker.sock')
+        image = image_name.rpartition(':')[0]
+        tag = image_name.rpartition(':')[2]
+        repo = pull_source + '/' + image
+
+        response = [line for line in dockerc.pull(repo,
+                    tag=tag, stream=True, insecure_registry=True)]
+        self.logger.debug(response)
+
+        full_image = repo + ':' + tag
+        new_repo = push_destination + '/' + image
+        response = dockerc.tag(image=full_image, repository=new_repo,
+                               tag=tag, force=True)
+        self.logger.debug(response)
+
+        response = [line for line in dockerc.push(new_repo,
+                    tag=tag, stream=True, insecure_registry=True)]
+        self.logger.debug(response)
+
+        self.logger.info('Completed upload for docker image %s' % image_name)
diff --git a/tripleo_common/tests/image/fakes.py b/tripleo_common/tests/image/fakes.py
index a4d0173..0ad8984 100644
--- a/tripleo_common/tests/image/fakes.py
+++ b/tripleo_common/tests/image/fakes.py
@@ -24,3 +24,16 @@ def create_disk_images():
     }
 
     return disk_images
+
+
+def create_upload_images():
+    uploads = {
+        'uploads': [{
+            'imagename': 'dprince/heat-docker-agents-centos:latest',
+            'uploader': 'docker',
+            'pull_source': 'docker.io',
+            'push_destination': 'localhost:8787',
+        }]
+    }
+
+    return uploads
diff --git a/tripleo_common/tests/image/test_base.py b/tripleo_common/tests/image/test_base.py
index 2d8cb1e..d9a2f21 100644
--- a/tripleo_common/tests/image/test_base.py
+++ b/tripleo_common/tests/image/test_base.py
@@ -37,7 +37,7 @@ class TestBaseImageManager(testbase.TestCase):
 
         with mock.patch('six.moves.builtins.open', mock_open_context):
             base_manager = BaseImageManager(['yamlfile'])
-            disk_images = base_manager.load_config_files()
+            disk_images = base_manager.load_config_files('disk_images')
 
         mock_yaml_load.assert_called_once_with("YAML")
         self.assertEqual(disk_images, [{
@@ -49,7 +49,8 @@ class TestBaseImageManager(testbase.TestCase):
 
     def test_load_config_files_not_found(self):
         base_manager = BaseImageManager(['file/does/not/exist'])
-        self.assertRaises(IOError, base_manager.load_config_files)
+        self.assertRaises(IOError, base_manager.load_config_files,
+                          'disk_images')
 
     @mock.patch('yaml.load', autospec=True)
     @mock.patch('os.path.isfile', autospec=True)
@@ -76,7 +77,7 @@ class TestBaseImageManager(testbase.TestCase):
 
         with mock.patch('six.moves.builtins.open', mock_open_context):
             base_manager = BaseImageManager(['yamlfile1', 'yamlfile2'])
-            disk_images = base_manager.load_config_files()
+            disk_images = base_manager.load_config_files('disk_images')
 
         self.assertEqual(mock_yaml_load.call_count, 2)
         self.assertEqual(disk_images, [{
diff --git a/tripleo_common/tests/image/test_image_uploader.py b/tripleo_common/tests/image/test_image_uploader.py
new file mode 100644
index 0000000..91b133e
--- /dev/null
+++ b/tripleo_common/tests/image/test_image_uploader.py
@@ -0,0 +1,73 @@
+#   Copyright 2015 Red Hat, Inc.
+#
+#   Licensed under the Apache License, Version 2.0 (the "License"); you may
+#   not use this file except in compliance with the License. You may obtain
+#   a copy of the License at
+#
+#        http://www.apache.org/licenses/LICENSE-2.0
+#
+#   Unless required by applicable law or agreed to in writing, software
+#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#   License for the specific language governing permissions and limitations
+#   under the License.
+#
+
+
+import mock
+
+from tripleo_common.common.exceptions import ImageUploaderException
+from tripleo_common.image.image_uploader import DockerImageUploader
+from tripleo_common.image.image_uploader import ImageUploader
+from tripleo_common.tests import base
+
+
+class TestImageUploader(base.TestCase):
+
+    def setUp(self):
+        super(TestImageUploader, self).setUp()
+
+    def test_get_uploader_docker(self):
+        uploader = ImageUploader.get_uploader('docker')
+        assert isinstance(uploader, DockerImageUploader)
+
+    def test_get_builder_unknown(self):
+        self.assertRaises(ImageUploaderException, ImageUploader.get_uploader,
+                          'unknown')
+
+
+class TestDockerImageUploader(base.TestCase):
+
+    def setUp(self):
+        super(TestDockerImageUploader, self).setUp()
+        self.uploader = DockerImageUploader()
+        self.patcher = mock.patch('tripleo_common.image.image_uploader.Client')
+        self.dockermock = self.patcher.start()
+
+    def tearDown(self):
+        super(TestDockerImageUploader, self).tearDown()
+        self.patcher.stop()
+
+    def test_upload_image(self):
+        image = 'dprince/heat-docker-agents-centos'
+        tag = 'latest'
+        pull_source = 'docker.io'
+        push_destination = 'localhost:8787'
+
+        self.uploader.upload_image(image + ':' + tag,
+                                   pull_source,
+                                   push_destination)
+
+        self.dockermock.assert_called_once_with(
+            base_url='unix://var/run/docker.sock')
+
+        self.dockermock.return_value.pull.assert_called_once_with(
+            pull_source + '/' + image,
+            tag=tag, stream=True, insecure_registry=True)
+        self.dockermock.return_value.tag.assert_called_once_with(
+            image=pull_source + '/' + image + ':' + tag,
+            repository=push_destination + '/' + image,
+            tag=tag, force=True)
+        self.dockermock.return_value.push(
+            push_destination + '/' + image,
+            tag=tag, stream=True, insecure_registry=True)
